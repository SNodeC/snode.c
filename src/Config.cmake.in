# snode.c - a slim toolkit for network communication
# Copyright (C) 2020, 2021, 2022, 2023 Volker Christian <me@vchrist.at>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

@PACKAGE_INIT@

# Logger
set(logger_DEPENDENCIES "")

# Utils
set(utils_DEPENDENCIES logger)

# Core
set(core_DEPENDENCIES mux-@SNODEC_IO_MULTIPLEXER@ utils)
set(core-socket_DEPENDENCIES core)
set(core-socket-stream_DEPENDENCIES core-socket)
set(core-socket-stream-legacy_DEPENDENCIES core-socket-stream)
set(core-socket-stream-tls_DEPENDENCIES core-socket-stream)

# Database
set(db-mariadb_DEPENDENCIES core)

# Base network code
set(net_DEPENDENCIES core)
set(net-in_DEPENDENCIES net core-socket)
set(net-in6_DEPENDENCIES net core-socket)
set(net-l2_DEPENDENCIES net core-socket)
set(net-rc_DEPENDENCIES net core-socket)
set(net-un_DEPENDENCIES net core-socket)

# Base network-stream code
set(net-in-stream_DEPENDENCIES net-in)
set(net-in6-stream_DEPENDENCIES net-in6)
set(net-l2-stream_DEPENDENCIES net-l2)
set(net-rc-stream_DEPENDENCIES net-rc)
set(net-un-stream_DEPENDENCIES net-un)

# Legacy network-stream code
set(net-in-stream-legacy_DEPENDENCIES net-in-stream core-socket-stream-legacy)
set(net-in6-stream-legacy_DEPENDENCIES net-in6-stream core-socket-stream-legacy)
set(net-l2-stream-legacy_DEPENDENCIES net-l2-stream core-socket-stream-legacy)
set(net-rc-stream-legacy_DEPENDENCIES net-rc-stream core-socket-stream-legacy)
set(net-un-stream-legacy_DEPENDENCIES net-un-stream core-socket-stream-legacy)

# Tls network-stream code
set(net-in-stream-tls_DEPENDENCIES net-in-stream core-socket-stream-tls)
set(net-in6-stream-tls_DEPENDENCIES net-in6-stream core-socket-stream-tls)
set(net-l2-stream-tls_DEPENDENCIES net-l2-stream core-socket-stream-tls)
set(net-rc-stream-tls_DEPENDENCIES net-rc-stream core-socket-stream-tls)
set(net-un-stream-tls_DEPENDENCIES net-un-stream core-socket-stream-tls)

# Base network-dgram code
set(net-un-dgram_DEPENDENCIES net-un)

# HTTP
set(http_DEPENDENCIES core-socket-stream)
set(http-server_DEPENDENCIES http)
set(http-client_DEPENDENCIES http)
set(http-server-express_DEPENDENCIES http-server)

# WebSocket
set(websocket_DEPENDENCIES logger)
set(websocket-server_DEPENDENCIES websocket http-server)
set(websocket-client_DEPENDENCIES websocket http-client)

# MQTT
set(mqtt_DEPENDENCIES core-socket-stream)
set(mqtt-server_DEPENDENCIES mqtt)
set(mqtt-client_DEPENDENCIES mqtt)

# MQTT-WebSocket
set(mqtt-server-websocket_DEPENDENCIES mqtt-server websocket-server)
set(mqtt-client-websocket_DEPENDENCIES mqtt-client websocket-client)

macro(LOAD_COMPONENT_WITH_DEPENDENCIES _comp _lspace _ladd)
    if("${${_comp}_LOADED}" STREQUAL "")
        message("${_lspace}${_comp}: loading ...")
        list(JOIN ${_comp}_DEPENDENCIES ", " TMP_COMP_DEPENDENCIES)
        if(NOT "${TMP_COMP_DEPENDENCIES}" STREQUAL "")
            message("${_lspace}${_comp}: loading dependencies "
                    "\'${TMP_COMP_DEPENDENCIES}\'"
            )
            foreach(_depcomp ${${_comp}_DEPENDENCIES})
                load_component_with_dependencies(
                    ${_depcomp} "${_lspace}${_ladd}" "${_ladd}"
                )
            endforeach()
            message("${_lspace}${_comp}: dependencies loaded ")
        endif()
        include("${CMAKE_CURRENT_LIST_DIR}/snodec_${_comp}_Targets.cmake")
        include("${CMAKE_CURRENT_LIST_DIR}/snodec_${_comp}_Targets_Config.cmake"
                OPTIONAL RESULT_VARIABLE ${_comp}_TARGETS_CONFIG_FILE
        )
        if(NOT "${${_comp}_TARGETS_CONFIG_FILE}" STREQUAL "NOTFOUND")
            message("${_lspace}${_comp}: configured")
        endif()
        set(${_comp}_LOADED true)
        message("${_lspace}${_comp}: loaded")
    else()
        message("${_lspace}${_comp}: already loaded")
    endif()
endmacro()

set(_supported_components
    core
    core-socket-stream-legacy
    core-socket-stream-tls
    net-in-stream-legacy
    net-in6-stream-legacy
    net-rc-stream-legacy
    net-l2-stream-legacy
    net-un-stream-legacy
    net-in-stream-tls
    net-in6-stream-tls
    net-rc-stream-tls
    net-l2-stream-tls
    net-un-stream-tls
    net-un-dgram
    db-mariadb
    http
    http-server
    http-client
    http-server-express
    websocket-server
    websocket-client
    mqtt
    mqtt-fast
    mqtt-server
    mqtt-client
    mqtt-server-websocket
    mqtt-client-websocket
)

include(CMakeFindDependencyMacro)

set(snodec_FOUND True)
foreach(_comp ${snodec_FIND_COMPONENTS})
    if(NOT _comp IN_LIST _supported_components)
        set(snodec_FOUND False)
        set(snodec_NOT_FOUND_MESSAGE "Unsupported component: ${_comp}")
    else()
        load_component_with_dependencies(${_comp} "" "  ")
    endif()
endforeach()

set(CMAKE_SKIP_RPATH FALSE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
# the RPATH to be used when installing, but only if it's not a system directory
list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES
     "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}" isSystemDir
)
if("${isSystemDir}" STREQUAL "-1")
    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
endif("${isSystemDir}" STREQUAL "-1")

set(SNODEC_SOVERSION @SNODEC_SOVERSION@)

add_link_options(LINKER:--as-needed)
